//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider="postgresql"
    url=env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum PlaceCategory {
    BAKERY
    MURAL
    ART
}

/// @@allow('all', true)
model Place {
    id String @id() @default(cuid())
    name String
    address String
    phone String?
    description String
    category PlaceCategory
    image String?
    lat Float?
    lon Float?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    placeImage PlaceImage[]
    zenstack_guard Boolean @default(true)
}

model PlaceImage {
    id String @id() @default(cuid())
    url String
    placeId String
    place Place @relation(fields: [placeId], references: [id], onDelete: Cascade)
    zenstack_guard Boolean @default(true)
}

model Account {
    id String @id() @default(cuid())
    userId String
    type String
    provider String
    providerAccountId String
    refresh_token String? @db.Text()
    access_token String? @db.Text()
    expires_at Int?
    token_type String?
    scope String?
    id_token String? @db.Text()
    session_state String?
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    zenstack_guard Boolean @default(true)
    @@unique([provider, providerAccountId])
}

model Session {
    id String @id() @default(cuid())
    sessionToken String @unique()
    userId String
    expires DateTime
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    zenstack_guard Boolean @default(true)
}

/// @@allow('create,read', true)
/// @@allow('update,delete', auth() == this)
model User {
    id String @id() @default(cuid())
    name String?
    email String? @unique()
    emailVerified DateTime?
    /// @password
    /// @omit
    password String
    image String?
    accounts Account[]
    sessions Session[]
    zenstack_guard Boolean @default(true)
    zenstack_transaction String?
    @@index([zenstack_transaction])
}

model VerificationToken {
    identifier String
    token String @unique()
    expires DateTime
    zenstack_guard Boolean @default(true)
    @@unique([identifier, token])
}